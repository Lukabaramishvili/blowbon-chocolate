/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,o,n,r,t,a,s,l={"./app/index.js":(e,o,n)=>{"use strict";n.r(o);var r=n("./app/images/placeholder.png");console.log(r.default)},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>a});var r=n("./node_modules/webpack-dev-server/client/utils/log.js");function t(e,o){for(var n=0;n<o.length;n++){var r=o[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(o){!function(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(o),this.client.onerror=function(e){r.log.error(e)}}var o,n,a;return o=e,(n=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(o){e(o.data)}}}])&&t(o.prototype,n),a&&t(o,a),e}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info":(e,o,n)=>{"use strict";n.r(o),Object(function(){var e=new Error("Cannot find module 'webpack/hot/log.js'");throw e.code="MODULE_NOT_FOUND",e}());var r=n("./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js"),t=n.n(r),a=n("./node_modules/webpack-dev-server/client/utils/parseURL.js"),s=n("./node_modules/webpack-dev-server/client/socket.js"),l=n("./node_modules/webpack-dev-server/client/overlay.js"),i=n("./node_modules/webpack-dev-server/client/utils/log.js"),d=n("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),c=n("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),u=n("./node_modules/webpack-dev-server/client/utils/createSocketURL.js"),f={isUnloading:!1,currentHash:n.h()},_={hot:!1,liveReload:!1,progress:!1,overlay:!1},p=(0,a.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info");function m(e){Object(function(){var e=new Error("Cannot find module 'webpack/hot/log.js'");throw e.code="MODULE_NOT_FOUND",e}())("verbose"===e||"log"===e?"info":e),(0,i.setLogLevel)(e)}"true"===p.hot&&(_.hot=!0,i.log.info("Hot Module Replacement enabled.")),"true"===p["live-reload"]&&(_.liveReload=!0,i.log.info("Live Reloading enabled.")),p.logging&&(_.logging=p.logging),_.logging&&m(_.logging),self.addEventListener("beforeunload",(function(){f.isUnloading=!0}));var g={hot:function(){"false"!==p.hot&&(_.hot=!0,i.log.info("Hot Module Replacement enabled."))},liveReload:function(){"false"!==p["live-reload"]&&(_.liveReload=!0,i.log.info("Live Reloading enabled."))},invalid:function(){i.log.info("App updated. Recompiling..."),_.overlay&&(0,l.hide)(),(0,d.default)("Invalid")},hash:function(e){f.previousHash=f.currentHash,f.currentHash=e},logging:m,overlay:function(e){"undefined"!=typeof document&&(_.overlay=e)},progress:function(e){_.progress=e},"progress-update":function(e){_.progress&&i.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,d.default)("Progress",e)},"still-ok":function(){i.log.info("Nothing changed."),_.overlay&&(0,l.hide)(),(0,d.default)("StillOk")},ok:function(){(0,d.default)("Ok"),_.overlay&&(0,l.hide)(),(0,c.default)(_,f)},"content-changed":function(e){i.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){i.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e){i.log.warn("Warnings while compiling.");var o=e.map((function(e){var o=(0,l.formatProblem)("warning",e),n=o.header,r=o.body;return"".concat(n,"\n").concat(t()(r))}));(0,d.default)("Warnings",o);for(var n=0;n<o.length;n++)i.log.warn(o[n]);("boolean"==typeof _.overlay?_.overlay:_.overlay&&_.overlay.warnings)&&(0,l.show)("warning",e),(0,c.default)(_,f)},errors:function(e){i.log.error("Errors while compiling. Reload prevented.");var o=e.map((function(e){var o=(0,l.formatProblem)("error",e),n=o.header,r=o.body;return"".concat(n,"\n").concat(t()(r))}));(0,d.default)("Errors",o);for(var n=0;n<o.length;n++)i.log.error(o[n]);("boolean"==typeof _.overlay?_.overlay:_.overlay&&_.overlay.errors)&&(0,l.show)("error",e)},error:function(e){i.log.error(e)},close:function(){i.log.info("Disconnected!"),_.overlay&&(0,l.hide)(),(0,d.default)("Close")}},b=(0,u.default)(p);(0,s.default)(b,g)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(e,o)=>{!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,o){function n(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,o){if(!e)return;if("string"==typeof e)return r(e,o);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,o)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,o){(null==o||o>e.length)&&(o=e.length);for(var n=0,r=new Array(o);n<o;n++)r[n]=e[n];return r}function t(e,o){for(var n=0;n<o.length;n++){var r=o[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});o.LogType=a;var s=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),i=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),d=function(){function e(o,n){!function(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}(this,e),this[s]=o,this.getChildLogger=n}var o,r,d;return o=e,r=[{key:"error",value:function(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];this[s](a.error,o)}},{key:"warn",value:function(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];this[s](a.warn,o)}},{key:"info",value:function(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];this[s](a.info,o)}},{key:"log",value:function(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];this[s](a.log,o)}},{key:"debug",value:function(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];this[s](a.debug,o)}},{key:"assert",value:function(e){if(!e){for(var o=arguments.length,n=new Array(o>1?o-1:0),r=1;r<o;r++)n[r-1]=arguments[r];this[s](a.error,n)}}},{key:"trace",value:function(){this[s](a.trace,["Trace"])}},{key:"clear",value:function(){this[s](a.clear)}},{key:"status",value:function(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];this[s](a.status,o)}},{key:"group",value:function(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];this[s](a.group,o)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];this[s](a.groupCollapsed,o)}},{key:"groupEnd",value:function(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];this[s](a.groupEnd,o)}},{key:"profile",value:function(e){this[s](a.profile,[e])}},{key:"profileEnd",value:function(e){this[s](a.profileEnd,[e])}},{key:"time",value:function(e){this[l]=this[l]||new Map,this[l].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var o=this[l]&&this[l].get(e);if(!o)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var r=process.hrtime(o);this[s](a.time,[e].concat(n(r)))}},{key:"timeEnd",value:function(e){var o=this[l]&&this[l].get(e);if(!o)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var r=process.hrtime(o);this[l].delete(e),this[s](a.time,[e].concat(n(r)))}},{key:"timeAggregate",value:function(e){var o=this[l]&&this[l].get(e);if(!o)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var n=process.hrtime(o);this[l].delete(e),this[i]=this[i]||new Map;var r=this[i].get(e);void 0!==r&&(n[1]+r[1]>1e9?(n[0]+=r[0]+1,n[1]=n[1]-1e9+r[1]):(n[0]+=r[0],n[1]+=r[1])),this[i].set(e,n)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[i]){var o=this[i].get(e);void 0!==o&&this[s](a.time,[e].concat(n(o)))}}}],r&&t(o.prototype,r),d&&t(o,d),e}();o.Logger=d},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,o,n){function r(e){return function(e){if(Array.isArray(e))return t(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,o){if(!e)return;if("string"==typeof e)return t(e,o);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return t(e,o)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function t(e,o){(null==o||o>e.length)&&(o=e.length);for(var n=0,r=new Array(o);n<o;n++)r[n]=e[n];return r}var a=n("./node_modules/webpack/lib/logging/Logger.js").LogType,s=function(e){if("string"==typeof e){var o=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return o.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(o){return e.test(o)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},l={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var o=e.level,n=void 0===o?"info":o,t=e.debug,i=void 0!==t&&t,d=e.console,c="boolean"==typeof i?[function(){return i}]:[].concat(i).map(s),u=l["".concat(n)]||0;return function(e,o,n){var t=function(){return Array.isArray(n)?n.length>0&&"string"==typeof n[0]?["[".concat(e,"] ").concat(n[0])].concat(r(n.slice(1))):["[".concat(e,"]")].concat(r(n)):[]},s=c.some((function(o){return o(e)}));switch(o){case a.debug:if(!s)return;"function"==typeof d.debug?d.debug.apply(d,r(t())):d.log.apply(d,r(t()));break;case a.log:if(!s&&u>l.log)return;d.log.apply(d,r(t()));break;case a.info:if(!s&&u>l.info)return;d.info.apply(d,r(t()));break;case a.warn:if(!s&&u>l.warn)return;d.warn.apply(d,r(t()));break;case a.error:if(!s&&u>l.error)return;d.error.apply(d,r(t()));break;case a.trace:if(!s)return;d.trace();break;case a.groupCollapsed:if(!s&&u>l.log)return;if(!s&&u>l.verbose){"function"==typeof d.groupCollapsed?d.groupCollapsed.apply(d,r(t())):d.log.apply(d,r(t()));break}case a.group:if(!s&&u>l.log)return;"function"==typeof d.group?d.group.apply(d,r(t())):d.log.apply(d,r(t()));break;case a.groupEnd:if(!s&&u>l.log)return;"function"==typeof d.groupEnd&&d.groupEnd();break;case a.time:if(!s&&u>l.log)return;var i=1e3*n[1]+n[2]/1e6,f="[".concat(e,"] ").concat(n[0],": ").concat(i," ms");"function"==typeof d.logTime?d.logTime(f):d.log(f);break;case a.profile:"function"==typeof d.profile&&d.profile.apply(d,r(t()));break;case a.profileEnd:"function"==typeof d.profileEnd&&d.profileEnd.apply(d,r(t()));break;case a.clear:if(!s&&u>l.log)return;"function"==typeof d.clear&&d.clear();break;case a.status:if(!s&&u>l.info)return;"function"==typeof d.status?0===n.length?d.status():d.status.apply(d,r(t())):0!==n.length&&d.info.apply(d,r(t()));break;default:throw new Error("Unexpected LogType ".concat(o))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,o,n){function r(){return r=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}var t=n("./client-src/modules/logger/SyncBailHookFake.js"),a=n("./node_modules/webpack/lib/logging/Logger.js").Logger,s=n("./node_modules/webpack/lib/logging/createConsoleLogger.js"),l={level:"info",debug:!1,console},i=s(l);o.getLogger=function(e){return new a((function(n,r){void 0===o.hooks.log.call(e,n,r)&&i(e,n,r)}),(function(n){return o.getLogger("".concat(e,"/").concat(n))}))},o.configureDefaultLogger=function(e){r(l,e),i=s(l)},o.hooks={log:new t(["origin","type","args"])}}},n={};function r(o){var t=n[o];if(void 0!==t)return t.exports;var a=n[o]={exports:{}};return e[o](a,a.exports,r),a.exports}r.d=function(e,o){for(var n in o)r.o(o,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},r.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var t={};!function(){r.r(t),r.d(t,{default:function(){return e}});var e=r("./node_modules/webpack/lib/logging/runtime.js")}();var a=o;for(var s in t)a[s]=t[s];t.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js":(e,o)=>{!function(){"use strict";var e={"./node_modules/strip-ansi/index.js":function(e,o,n){n.r(o),n.d(o,{default:function(){return t}});var r=n("./node_modules/strip-ansi/node_modules/ansi-regex/index.js");function t(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace((0,r.default)(),"")}},"./node_modules/strip-ansi/node_modules/ansi-regex/index.js":function(e,o,n){function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=e.onlyFirst,n=void 0!==o&&o,r=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(r,n?void 0:"g")}n.r(o),n.d(o,{default:function(){return r}})}},n={};function r(o){var t=n[o];if(void 0!==t)return t.exports;var a=n[o]={exports:{}};return e[o](a,a.exports,r),a.exports}r.d=function(e,o){for(var n in o)r.o(o,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},r.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var t={};!function(){r.r(t);var e=r("./node_modules/strip-ansi/index.js");t.default=e.default}();var a=o;for(var s in t)a[s]=t[s];t.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{formatProblem:()=>d,show:()=>c,hide:()=>i}),Object(function(){var e=new Error("Cannot find module 'ansi-html-community'");throw e.code="MODULE_NOT_FOUND",e}()),Object(function(){var e=new Error("Cannot find module 'html-entities'");throw e.code="MODULE_NOT_FOUND",e}());var r,t,a={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},s=[];function l(e){t?e(t):(s.push(e),r||((r=document.createElement("iframe")).id="webpack-dev-server-client-overlay",r.src="about:blank",r.style.position="fixed",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.border="none",r.style.zIndex=9999999999,r.onload=function(){(t=r.contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",t.style.position="fixed",t.style.boxSizing="border-box",t.style.left=0,t.style.top=0,t.style.right=0,t.style.bottom=0,t.style.width="100vw",t.style.height="100vh",t.style.backgroundColor="rgba(0, 0, 0, 0.85)",t.style.color="#E8E8E8",t.style.fontFamily="Menlo, Consolas, monospace",t.style.fontSize="large",t.style.padding="2rem",t.style.lineHeight="1.2",t.style.whiteSpace="pre-wrap",t.style.overflow="auto";var e=document.createElement("span");e.innerText="Compiled with problems:";var o=document.createElement("button");o.innerText="X",o.style.background="transparent",o.style.border="none",o.style.fontSize="20px",o.style.fontWeight="bold",o.style.color="white",o.style.cursor="pointer",o.style.cssFloat="right",o.style.styleFloat="right",o.addEventListener("click",(function(){i()})),t.appendChild(e),t.appendChild(o),t.appendChild(document.createElement("br")),t.appendChild(document.createElement("br")),r.contentDocument.body.appendChild(t),s.forEach((function(e){e(t)})),s=[],r.onload=null},document.body.appendChild(r)))}function i(){r&&(document.body.removeChild(r),r=null,t=null)}function d(e,o){var n="warning"===e?"WARNING":"ERROR",r="";if("string"==typeof o)r+=o;else{var t=o.file||"",a=o.moduleName?-1!==o.moduleName.indexOf("!")?"".concat(o.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(o.moduleName,")"):"".concat(o.moduleName):"",s=o.loc;n+="".concat(a||t?" in ".concat(a?"".concat(a).concat(t?" (".concat(t,")"):""):t).concat(s?" ".concat(s):""):""),r+=o.message||""}return{header:n,body:r}}function c(e,o){l((function(){o.forEach((function(o){var n=document.createElement("div"),r=document.createElement("span"),s=d(e,o),l=s.header,i=s.body;r.innerText=l,r.style.color="#".concat(a.red);var c=Object(function(){var e=new Error("Cannot find module 'ansi-html-community'");throw e.code="MODULE_NOT_FOUND",e}())(Object(function(){var e=new Error("Cannot find module 'html-entities'");throw e.code="MODULE_NOT_FOUND",e}())(i)),u=document.createElement("div");u.innerHTML=c,n.appendChild(r),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),n.appendChild(u),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),t.appendChild(n)}))}))}Object(function(){var e=new Error("Cannot find module 'ansi-html-community'");throw e.code="MODULE_NOT_FOUND",e}())(a)},"./node_modules/webpack-dev-server/client/socket.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var r=n("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),t=n("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),a=void 0!==t?void 0!==t.default?t.default:t:r.default,s=0,l=null,i=function(e,o){(l=new a(e)).onOpen((function(){s=0})),l.onClose((function(){if(0===s&&o.close(),l=null,s<=10){var n=1e3*Math.pow(2,s)+100*Math.random();s+=1,setTimeout((function(){i(e,o)}),n)}})),l.onMessage((function(e){var n=JSON.parse(e);o[n.type]&&o[n.type](n.data)}))};const d=i},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r}),Object(function(){var e=new Error("Cannot find module 'url'");throw e.code="MODULE_NOT_FOUND",e}());const r=function(e){var o=e.hostname,n="0.0.0.0"===o||"::"===o||"[::]"===o;n&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(o=self.location.hostname);var r=e.protocol||self.location.protocol;("auto:"===r||o&&n&&"https:"===self.location.protocol)&&(r=self.location.protocol),r=r.replace(/^(?:http|.+-extension|file)/i,"ws");var t="";e.username&&(t=e.username,e.password&&(t=t.concat(":",e.password)));var a=(o||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),s=e.port;s&&"0"!==s||(s=self.location.port);var l="/ws";return e.pathname&&!e.fromCurrentScript&&(l=e.pathname),Object(function(){var e=new Error("Cannot find module 'url'");throw e.code="MODULE_NOT_FOUND",e}())({protocol:r,auth:t,hostname:a,port:s,pathname:l,slashes:!0})}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});const r=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],o=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(o.length>0)return o[o.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{log:()=>s,setLogLevel:()=>a});var r=n("./node_modules/webpack-dev-server/client/modules/logger/index.js"),t=n.n(r);function a(e){t().configureDefaultLogger({level:e})}a("info");var s=t().getLogger("webpack-dev-server")},"./node_modules/webpack-dev-server/client/utils/parseURL.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t}),Object(function(){var e=new Error("Cannot find module 'url'");throw e.code="MODULE_NOT_FOUND",e}());var r=n("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");const t=function(e){var o={};if("string"==typeof e&&""!==e)for(var n=e.substr(1).split("&"),t=0;t<n.length;t++){var a=n[t].split("=");o[a[0]]=decodeURIComponent(a[1])}else{var s=(0,r.default)();if(s){var l;try{l=new URL(s,self.location.href)}catch(e){}l&&((o=l).fromCurrentScript=!0)}else(o=Object(function(){var e=new Error("Cannot find module 'url'");throw e.code="MODULE_NOT_FOUND",e}())(self.location.href,!0,!0)).fromCurrentScript=!0}return o}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t}),Object(function(){var e=new Error("Cannot find module 'webpack/hot/emitter.js'");throw e.code="MODULE_NOT_FOUND",e}());var r=n("./node_modules/webpack-dev-server/client/utils/log.js");const t=function(e,o){var n=e.hot,t=e.liveReload;if(!o.isUnloading){var a=o.currentHash,s=o.previousHash;if(!(a.indexOf(s)>=0)){var l=self.location.search.toLowerCase(),i=-1===l.indexOf("webpack-dev-server-hot=false"),d=-1===l.indexOf("webpack-dev-server-live-reload=false");if(n&&i)r.log.info("App hot update..."),Object(function(){var e=new Error("Cannot find module 'webpack/hot/emitter.js'");throw e.code="MODULE_NOT_FOUND",e}())("webpackHotUpdate",o.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(o.currentHash),"*");else if(t&&d)var c=self,u=self.setInterval((function(){("about:"!==c.location.protocol||(c=c.parent).parent===c)&&f(c,u)}))}}function f(e,o){clearInterval(o),r.log.info("App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});const r=function(e,o){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:o},"*")}},"./node_modules/webpack/hot/dev-server.js":(e,o,n)=>{var r,t=function(){return r.indexOf(n.h())>=0},a=n("./node_modules/webpack/hot/log.js"),s=function o(){e.hot.check(!0).then((function(e){if(!e)return a("warning","[HMR] Cannot find update. Need to do a full reload!"),a("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void window.location.reload();t()||o(),n("./node_modules/webpack/hot/log-apply-result.js")(e,e),t()&&a("info","[HMR] App is up to date.")})).catch((function(o){var n=e.hot.status();["abort","fail"].indexOf(n)>=0?(a("warning","[HMR] Cannot apply update. Need to do a full reload!"),a("warning","[HMR] "+a.formatError(o)),window.location.reload()):a("warning","[HMR] Update failed: "+a.formatError(o))}))};n("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(o){r=o,t()||"idle"!==e.hot.status()||(a("info","[HMR] Checking for updates on the server..."),s())})),a("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(e,o,n)=>{var r=n(Object(function(){var e=new Error("Cannot find module 'events'");throw e.code="MODULE_NOT_FOUND",e}()));e.exports=new r},"./node_modules/webpack/hot/log-apply-result.js":(e,o,n)=>{e.exports=function(e,o){var r=e.filter((function(e){return o&&o.indexOf(e)<0})),t=n("./node_modules/webpack/hot/log.js");(r.length>0&&(t("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),r.forEach((function(e){t("warning","[HMR]  - "+e)}))),o&&0!==o.length)?(t("info","[HMR] Updated modules:"),o.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var o=e.split("!");t.groupCollapsed("info","[HMR]  - "+o.pop()),t("info","[HMR]  - "+e),t.groupEnd("info")}else t("info","[HMR]  - "+e)})),o.every((function(e){return"number"==typeof e}))&&t("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):t("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":e=>{var o="info";function n(){}function r(e){return"info"===o&&"info"===e||["info","warning"].indexOf(o)>=0&&"warning"===e||["info","warning","error"].indexOf(o)>=0&&"error"===e}function t(e){return function(o,n){r(o)&&e(n)}}e.exports=function(e,o){r(e)&&("info"===e?console.log(o):"warning"===e?console.warn(o):"error"===e&&console.error(o))};var a=console.group||n,s=console.groupCollapsed||n,l=console.groupEnd||n;e.exports.group=t(a),e.exports.groupCollapsed=t(s),e.exports.groupEnd=t(l),e.exports.setLogLevel=function(e){o=e},e.exports.formatError=function(e){var o=e.message,n=e.stack;return n?n.indexOf(o)<0?o+"\n"+n:n:o}},"./app/images/placeholder.png":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});const r=n.p+"dbaf0f9702bdafadede5b4e46c7702df.png"},"./styles/index.scss":()=>{throw new Error('Module build failed (from ./node_modules/mini-css-extract-plugin/dist/loader.js):\nHookWebpackError: Cannot find module \'../fonts/suisse-bp-light.woff2\'\n    at tryRunOrWebpackError (/Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/HookWebpackError.js:88:9)\n    at __webpack_require_module__ (/Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/Compilation.js:4966:12)\n    at __webpack_require__ (/Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/Compilation.js:4923:18)\n    at /Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/Compilation.js:4994:20\n    at symbolIterator (/Users/luka/Desktop/desk-lab/floema/node_modules/neo-async/async.js:3485:9)\n    at timesSync (/Users/luka/Desktop/desk-lab/floema/node_modules/neo-async/async.js:2297:7)\n    at Object.eachLimit (/Users/luka/Desktop/desk-lab/floema/node_modules/neo-async/async.js:3463:5)\n    at /Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/Compilation.js:4866:16\n    at symbolIterator (/Users/luka/Desktop/desk-lab/floema/node_modules/neo-async/async.js:3485:9)\n    at timesSync (/Users/luka/Desktop/desk-lab/floema/node_modules/neo-async/async.js:2297:7)\n-- inner error --\nError: Cannot find module \'../fonts/suisse-bp-light.woff2\'\n    at webpackMissingModule (/Users/luka/Desktop/desk-lab/floema/node_modules/css-loader/dist/cjs.js!/Users/luka/Desktop/desk-lab/floema/node_modules/postcss-loader/dist/cjs.js!/Users/luka/Desktop/desk-lab/floema/node_modules/sass-loader/dist/cjs.js!/Users/luka/Desktop/desk-lab/floema/styles/index.scss:19:113)\n    at Module.<anonymous> (/Users/luka/Desktop/desk-lab/floema/node_modules/css-loader/dist/cjs.js!/Users/luka/Desktop/desk-lab/floema/node_modules/postcss-loader/dist/cjs.js!/Users/luka/Desktop/desk-lab/floema/node_modules/sass-loader/dist/cjs.js!/Users/luka/Desktop/desk-lab/floema/styles/index.scss:19:218)\n    at /Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js:432:11\n    at Hook.eval [as call] (eval at create (/Users/luka/Desktop/desk-lab/floema/node_modules/tapable/lib/HookCodeFactory.js:19:10), <anonymous>:7:1)\n    at /Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/Compilation.js:4968:39\n    at tryRunOrWebpackError (/Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/HookWebpackError.js:83:7)\n    at __webpack_require_module__ (/Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/Compilation.js:4966:12)\n    at __webpack_require__ (/Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/Compilation.js:4923:18)\n    at /Users/luka/Desktop/desk-lab/floema/node_modules/webpack/lib/Compilation.js:4994:20\n    at symbolIterator (/Users/luka/Desktop/desk-lab/floema/node_modules/neo-async/async.js:3485:9)\n\nGenerated code for /Users/luka/Desktop/desk-lab/floema/node_modules/css-loader/dist/cjs.js!/Users/luka/Desktop/desk-lab/floema/node_modules/postcss-loader/dist/cjs.js!/Users/luka/Desktop/desk-lab/floema/node_modules/sass-loader/dist/cjs.js!/Users/luka/Desktop/desk-lab/floema/styles/index.scss\n 1 | __webpack_require__.r(__webpack_exports__);\n 2 | /* harmony export */ __webpack_require__.d(__webpack_exports__, {\n 3 | /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n 4 | /* harmony export */ });\n 5 | /* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "/Users/luka/Desktop/desk-lab/floema/node_modules/babel-loader/lib/index.js!/Users/luka/Desktop/desk-lab/floema/node_modules/css-loader/dist/runtime/sourceMaps.js");\n 6 | /* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n 7 | /* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "/Users/luka/Desktop/desk-lab/floema/node_modules/babel-loader/lib/index.js!/Users/luka/Desktop/desk-lab/floema/node_modules/css-loader/dist/runtime/api.js");\n 8 | /* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n 9 | /* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/getUrl.js */ "/Users/luka/Desktop/desk-lab/floema/node_modules/babel-loader/lib/index.js!/Users/luka/Desktop/desk-lab/floema/node_modules/css-loader/dist/runtime/getUrl.js");\n10 | /* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n11 | // Imports\n12 | \n13 | \n14 | \n15 | var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../fonts/george-x-regular.woff2 */ "asset/resource|/Users/luka/Desktop/desk-lab/floema/node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[2]!/Users/luka/Desktop/desk-lab/floema/fonts/george-x-regular.woff2"), __webpack_require__.b);\n16 | var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ../fonts/george-x-regular.woff */ "asset/resource|/Users/luka/Desktop/desk-lab/floema/node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[2]!/Users/luka/Desktop/desk-lab/floema/fonts/george-x-regular.woff"), __webpack_require__.b);\n17 | var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ../fonts/suisse-bp-regular.woff2 */ "asset/resource|/Users/luka/Desktop/desk-lab/floema/node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[2]!/Users/luka/Desktop/desk-lab/floema/fonts/suisse-bp-regular.woff2"), __webpack_require__.b);\n18 | var ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(/*! ../fonts/suisse-bp-regular.woff */ "asset/resource|/Users/luka/Desktop/desk-lab/floema/node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[2]!/Users/luka/Desktop/desk-lab/floema/fonts/suisse-bp-regular.woff"), __webpack_require__.b);\n19 | var ___CSS_LOADER_URL_IMPORT_4___ = new URL(/* asset import */ Object(function webpackMissingModule() { var e = new Error("Cannot find module \'../fonts/suisse-bp-light.woff2\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }()), __webpack_require__.b);\n20 | var ___CSS_LOADER_URL_IMPORT_5___ = new URL(/* asset import */ Object(function webpackMissingModule() { var e = new Error("Cannot find module \'../fonts/suisse-bp-light.woff\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }()), __webpack_require__.b);\n21 | var ___CSS_LOADER_URL_IMPORT_6___ = new URL(/* asset import */ __webpack_require__(/*! ../fonts/suisse-bp-ultra-light.woff2 */ "asset/resource|/Users/luka/Desktop/desk-lab/floema/node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[2]!/Users/luka/Desktop/desk-lab/floema/fonts/suisse-bp-ultra-light.woff2"), __webpack_require__.b);\n22 | var ___CSS_LOADER_URL_IMPORT_7___ = new URL(/* asset import */ __webpack_require__(/*! ../fonts/suisse-bp-ultra-light.woff */ "asset/resource|/Users/luka/Desktop/desk-lab/floema/node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[2]!/Users/luka/Desktop/desk-lab/floema/fonts/suisse-bp-ultra-light.woff"), __webpack_require__.b);\n23 | var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n24 | var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\n25 | var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);\n26 | var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);\n27 | var ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);\n28 | var ___CSS_LOADER_URL_REPLACEMENT_4___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_4___);\n29 | var ___CSS_LOADER_URL_REPLACEMENT_5___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_5___);\n30 | var ___CSS_LOADER_URL_REPLACEMENT_6___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_6___);\n31 | var ___CSS_LOADER_URL_REPLACEMENT_7___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_7___);\n32 | // Module\n33 | ___CSS_LOADER_EXPORT___.push([module.id, ".dg.ac {\\n  z-index: 99999 !important;\\n}\\n\\n@font-face {\\n  font-family: \\"George X\\";\\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\\"woff2\\"), url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") format(\\"woff\\");\\n  font-weight: normal;\\n  font-style: normal;\\n  font-display: swap;\\n}\\n@font-face {\\n  font-family: \\"Suisse BP\\";\\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") format(\\"woff2\\"), url(" + ___CSS_LOADER_URL_REPLACEMENT_3___ + ") format(\\"woff\\");\\n  font-weight: normal;\\n  font-style: normal;\\n  font-display: swap;\\n}\\n@font-face {\\n  font-family: \\"Suisse BP\\";\\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_4___ + ") format(\\"woff2\\"), url(" + ___CSS_LOADER_URL_REPLACEMENT_5___ + ") format(\\"woff\\");\\n  font-weight: 300;\\n  font-style: normal;\\n  font-display: swap;\\n}\\n@font-face {\\n  font-family: \\"Suisse BP\\";\\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_6___ + ") format(\\"woff2\\"), url(" + ___CSS_LOADER_URL_REPLACEMENT_7___ + ") format(\\"woff\\");\\n  font-weight: 200;\\n  font-style: normal;\\n  font-display: swap;\\n}\\nhtml, body, div, span, applet, object, iframe,\\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\\na, abbr, acronym, address, big, cite, code,\\ndel, dfn, em, img, ins, kbd, q, s, samp,\\nsmall, strike, strong, sub, sup, tt, var,\\nb, u, i, center,\\ndl, dt, dd, ol, ul, li,\\nfieldset, form, label, legend,\\ntable, caption, tbody, tfoot, thead, tr, th, td,\\narticle, aside, canvas, details, embed,\\nfigure, figcaption, footer, header, hgroup,\\nmenu, nav, output, ruby, section, summary,\\ntime, mark, audio, video {\\n  margin: 0;\\n  padding: 0;\\n  border: 0;\\n  font-size: 100%;\\n  font: inherit;\\n  vertical-align: baseline;\\n}\\n\\n/* HTML5 display-role reset for older browsers */\\narticle, aside, details, figcaption, figure,\\nfooter, header, hgroup, menu, nav, section {\\n  display: block;\\n}\\n\\nbody {\\n  line-height: 1;\\n}\\n\\nol, ul {\\n  list-style: none;\\n}\\n\\nblockquote, q {\\n  quotes: none;\\n}\\n\\nblockquote:before, blockquote:after,\\nq:before, q:after {\\n  content: \\"\\";\\n  content: none;\\n}\\n\\ntable {\\n  border-collapse: collapse;\\n  border-spacing: 0;\\n}\\n\\nbody {\\n  font-family: \\"Suisse BP\\";\\n  font-size: 1.6rem;\\n}\\n\\n.about__content {\\n  color: #f0f;\\n}", "",{"version":3,"sources":["webpack://./styles/utils/vendors.scss","webpack://./styles/index.scss","webpack://./styles/base/fonts.scss","webpack://./styles/utils/variables.scss","webpack://./styles/base/reset.scss","webpack://./styles/base/base.scss","webpack://./styles/pages/about/content.scss"],"names":[],"mappings":"AAAA;EACE,yBAAA;ACCF;;ACFA;EACE,uBCEc;EDDd,oHAAA;EAEA,mBAAA;EACA,kBAAA;EACA,kBAAA;ADIF;ACDA;EACE,wBCNe;EDOf,oHAAA;EAEA,mBAAA;EACA,kBAAA;EACA,kBAAA;ADEF;ACCA;EACE,wBCfe;EDgBf,oHAAA;EAEA,gBAAA;EACA,kBAAA;EACA,kBAAA;ADAF;ACGA;EACE,wBCxBe;EDyBf,oHAAA;EAEA,gBAAA;EACA,kBAAA;EACA,kBAAA;ADFF;AG/BA;;;;;;;;;;;;;EAaC,SAAA;EACA,UAAA;EACA,SAAA;EACA,eAAA;EACA,aAAA;EACA,wBAAA;AHiCD;;AG/BA,gDAAA;AACA;;EAEC,cAAA;AHkCD;;AGhCA;EACC,cAAA;AHmCD;;AGjCA;EACC,gBAAA;AHoCD;;AGlCA;EACC,YAAA;AHqCD;;AGnCA;;EAEC,WAAA;EACA,aAAA;AHsCD;;AGpCA;EACC,yBAAA;EACA,iBAAA;AHuCD;;AIhFA;EACE,wBFGe;EEFf,iBAAA;AJmFF;;AKrFA;EACI,WAAA;ALwFJ","sourcesContent":[".dg.ac {\\n  z-index: 99999 !important;\\n}\\n",".dg.ac {\\n  z-index: 99999 !important;\\n}\\n\\n@font-face {\\n  font-family: \\"George X\\";\\n  src: url(\\"../fonts/george-x-regular.woff2\\") format(\\"woff2\\"), url(\\"../fonts/george-x-regular.woff\\") format(\\"woff\\");\\n  font-weight: normal;\\n  font-style: normal;\\n  font-display: swap;\\n}\\n@font-face {\\n  font-family: \\"Suisse BP\\";\\n  src: url(\\"../fonts/suisse-bp-regular.woff2\\") format(\\"woff2\\"), url(\\"../fonts/suisse-bp-regular.woff\\") format(\\"woff\\");\\n  font-weight: normal;\\n  font-style: normal;\\n  font-display: swap;\\n}\\n@font-face {\\n  font-family: \\"Suisse BP\\";\\n  src: url(\\"../fonts/suisse-bp-light.woff2\\") format(\\"woff2\\"), url(\\"../fonts/suisse-bp-light.woff\\") format(\\"woff\\");\\n  font-weight: 300;\\n  font-style: normal;\\n  font-display: swap;\\n}\\n@font-face {\\n  font-family: \\"Suisse BP\\";\\n  src: url(\\"../fonts/suisse-bp-ultra-light.woff2\\") format(\\"woff2\\"), url(\\"../fonts/suisse-bp-ultra-light.woff\\") format(\\"woff\\");\\n  font-weight: 200;\\n  font-style: normal;\\n  font-display: swap;\\n}\\nhtml, body, div, span, applet, object, iframe,\\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\\na, abbr, acronym, address, big, cite, code,\\ndel, dfn, em, img, ins, kbd, q, s, samp,\\nsmall, strike, strong, sub, sup, tt, var,\\nb, u, i, center,\\ndl, dt, dd, ol, ul, li,\\nfieldset, form, label, legend,\\ntable, caption, tbody, tfoot, thead, tr, th, td,\\narticle, aside, canvas, details, embed,\\nfigure, figcaption, footer, header, hgroup,\\nmenu, nav, output, ruby, section, summary,\\ntime, mark, audio, video {\\n  margin: 0;\\n  padding: 0;\\n  border: 0;\\n  font-size: 100%;\\n  font: inherit;\\n  vertical-align: baseline;\\n}\\n\\n/* HTML5 display-role reset for older browsers */\\narticle, aside, details, figcaption, figure,\\nfooter, header, hgroup, menu, nav, section {\\n  display: block;\\n}\\n\\nbody {\\n  line-height: 1;\\n}\\n\\nol, ul {\\n  list-style: none;\\n}\\n\\nblockquote, q {\\n  quotes: none;\\n}\\n\\nblockquote:before, blockquote:after,\\nq:before, q:after {\\n  content: \\"\\";\\n  content: none;\\n}\\n\\ntable {\\n  border-collapse: collapse;\\n  border-spacing: 0;\\n}\\n\\nbody {\\n  font-family: \\"Suisse BP\\";\\n  font-size: 1.6rem;\\n}\\n\\n.about__content {\\n  color: #f0f;\\n}","@font-face {\\n  font-family: $font-george-x;\\n  src: url(\\"../fonts/george-x-regular.woff2\\") format(\\"woff2\\"),\\n    url(\\"../fonts/george-x-regular.woff\\") format(\\"woff\\");\\n  font-weight: normal;\\n  font-style: normal;\\n  font-display: swap;\\n}\\n\\n@font-face {\\n  font-family: $font-suisse-bp;\\n  src: url(\\"../fonts/suisse-bp-regular.woff2\\") format(\\"woff2\\"),\\n    url(\\"../fonts/suisse-bp-regular.woff\\") format(\\"woff\\");\\n  font-weight: normal;\\n  font-style: normal;\\n  font-display: swap;\\n}\\n\\n@font-face {\\n  font-family: $font-suisse-bp;\\n  src: url(\\"../fonts/suisse-bp-light.woff2\\") format(\\"woff2\\"),\\n    url(\\"../fonts/suisse-bp-light.woff\\") format(\\"woff\\");\\n  font-weight: 300;\\n  font-style: normal;\\n  font-display: swap;\\n}\\n\\n@font-face {\\n  font-family: $font-suisse-bp;\\n  src: url(\\"../fonts/suisse-bp-ultra-light.woff2\\") format(\\"woff2\\"),\\n    url(\\"../fonts/suisse-bp-ultra-light.woff\\") format(\\"woff\\");\\n  font-weight: 200;\\n  font-style: normal;\\n  font-display: swap;\\n}\\n","$color-white: #fff;\\n$color-black: #000;\\n\\n$font-george-x: \\"George X\\";\\n$font-suisse-bp: \\"Suisse BP\\";\\n\\n$ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);\\n\\n$z-indexes: (\\"navigation\\", \\"content\\");\\n","html, body, div, span, applet, object, iframe,\\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\\na, abbr, acronym, address, big, cite, code,\\ndel, dfn, em, img, ins, kbd, q, s, samp,\\nsmall, strike, strong, sub, sup, tt, var,\\nb, u, i, center,\\ndl, dt, dd, ol, ul, li,\\nfieldset, form, label, legend,\\ntable, caption, tbody, tfoot, thead, tr, th, td,\\narticle, aside, canvas, details, embed, \\nfigure, figcaption, footer, header, hgroup, \\nmenu, nav, output, ruby, section, summary,\\ntime, mark, audio, video {\\n\\tmargin: 0;\\n\\tpadding: 0;\\n\\tborder: 0;\\n\\tfont-size: 100%;\\n\\tfont: inherit;\\n\\tvertical-align: baseline;\\n}\\n/* HTML5 display-role reset for older browsers */\\narticle, aside, details, figcaption, figure, \\nfooter, header, hgroup, menu, nav, section {\\n\\tdisplay: block;\\n}\\nbody {\\n\\tline-height: 1;\\n}\\nol, ul {\\n\\tlist-style: none;\\n}\\nblockquote, q {\\n\\tquotes: none;\\n}\\nblockquote:before, blockquote:after,\\nq:before, q:after {\\n\\tcontent: \'\';\\n\\tcontent: none;\\n}\\ntable {\\n\\tborder-collapse: collapse;\\n\\tborder-spacing: 0;\\n}","body {\\n  font-family: $font-suisse-bp;\\n  font-size: 1.6rem;\\n}\\n",".about__content {\\n    color: #f0f;\\n}\\n.about__content__wrapper {\\n}\\n.about__content__label {\\n}\\n.about__content__description {\\n}\\n.about__content__media {\\n}\\n.about__content__media__image {\\n}\\n"],"sourceRoot":""}]);\n34 | // Exports\n35 | /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n36 | ')}},i={};function d(e){var o=i[e];if(void 0!==o){if(void 0!==o.error)throw o.error;return o.exports}var n=i[e]={exports:{}};try{var r={id:e,module:n,factory:l[e],require:d};d.i.forEach((function(e){e(r)})),n=r.module,r.factory.call(n.exports,n,n.exports,r.require)}catch(e){throw n.error=e,e}return n.exports}d.m=l,d.c=i,d.i=[],d.n=e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return d.d(o,{a:o}),o},d.d=(e,o)=>{for(var n in o)d.o(o,n)&&!d.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},d.hu=e=>e+"."+d.h()+".hot-update.js",d.miniCssF=e=>{},d.hmrF=()=>"main."+d.h()+".hot-update.json",d.h=()=>"32f682e8a611d7ec5298",d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),d.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),e={},o="floema:",d.l=(n,r,t,a)=>{if(e[n])e[n].push(r);else{var s,l;if(void 0!==t)for(var i=document.getElementsByTagName("script"),c=0;c<i.length;c++){var u=i[c];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==o+t){s=u;break}}s||(l=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,d.nc&&s.setAttribute("nonce",d.nc),s.setAttribute("data-webpack",o+t),s.src=n),e[n]=[r];var f=(o,r)=>{s.onerror=s.onload=null,clearTimeout(_);var t=e[n];if(delete e[n],s.parentNode&&s.parentNode.removeChild(s),t&&t.forEach((e=>e(r))),o)return o(r)},_=setTimeout(f.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=f.bind(null,s.onerror),s.onload=f.bind(null,s.onload),l&&document.head.appendChild(s)}},d.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,o,n,r,t={},a=d.c,s=[],l=[],i="idle";function c(e){i=e;for(var o=[],n=0;n<l.length;n++)o[n]=l[n].call(null,e);return Promise.all(o)}function u(e){if(0===o.length)return e();var n=o;return o=[],Promise.all(n).then((function(){return u(e)}))}function f(e){if("idle"!==i)throw new Error("check() is only allowed in idle status");return c("check").then(d.hmrM).then((function(r){return r?c("prepare").then((function(){var t=[];return o=[],n=[],Promise.all(Object.keys(d.hmrC).reduce((function(e,o){return d.hmrC[o](r.c,r.r,r.m,e,n,t),e}),[])).then((function(){return u((function(){return e?p(e):c("ready").then((function(){return t}))}))}))})):c(m()?"ready":"idle").then((function(){return null}))}))}function _(e){return"ready"!==i?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):p(e)}function p(e){e=e||{},m();var o=n.map((function(o){return o(e)}));n=void 0;var t=o.map((function(e){return e.error})).filter(Boolean);if(t.length>0)return c("abort").then((function(){throw t[0]}));var a=c("dispose");o.forEach((function(e){e.dispose&&e.dispose()}));var s,l=c("apply"),i=function(e){s||(s=e)},d=[];return o.forEach((function(e){if(e.apply){var o=e.apply(i);if(o)for(var n=0;n<o.length;n++)d.push(o[n])}})),Promise.all([a,l]).then((function(){return s?c("fail").then((function(){throw s})):r?p(e).then((function(e){return d.forEach((function(o){e.indexOf(o)<0&&e.push(o)})),e})):c("idle").then((function(){return d}))}))}function m(){if(r)return n||(n=[]),Object.keys(d.hmrI).forEach((function(e){r.forEach((function(o){d.hmrI[e](o,n)}))})),r=void 0,!0}d.hmrD=t,d.i.push((function(p){var m,g,b,h,v=p.module,y=function(n,r){var t=a[r];if(!t)return n;var l=function(o){if(t.hot.active){if(a[o]){var l=a[o].parents;-1===l.indexOf(r)&&l.push(r)}else s=[r],e=o;-1===t.children.indexOf(o)&&t.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),s=[];return n(o)},d=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(o){n[e]=o}}};for(var f in n)Object.prototype.hasOwnProperty.call(n,f)&&"e"!==f&&Object.defineProperty(l,f,d(f));return l.e=function(e){return function(e){switch(i){case"ready":return c("prepare"),o.push(e),u((function(){return c("ready")})),e;case"prepare":return o.push(e),e;default:return e}}(n.e(e))},l}(p.require,p.id);v.hot=(m=p.id,g=v,h={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:b=e!==m,_requireSelf:function(){s=g.parents.slice(),e=b?void 0:m,d(m)},active:!0,accept:function(e,o,n){if(void 0===e)h._selfAccepted=!0;else if("function"==typeof e)h._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)h._acceptedDependencies[e[r]]=o||function(){},h._acceptedErrorHandlers[e[r]]=n;else h._acceptedDependencies[e]=o||function(){},h._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)h._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var o=0;o<e.length;o++)h._declinedDependencies[e[o]]=!0;else h._declinedDependencies[e]=!0},dispose:function(e){h._disposeHandlers.push(e)},addDisposeHandler:function(e){h._disposeHandlers.push(e)},removeDisposeHandler:function(e){var o=h._disposeHandlers.indexOf(e);o>=0&&h._disposeHandlers.splice(o,1)},invalidate:function(){switch(this._selfInvalidated=!0,i){case"idle":n=[],Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,n)})),c("ready");break;case"ready":Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,n)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:f,apply:_,status:function(e){if(!e)return i;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var o=l.indexOf(e);o>=0&&l.splice(o,1)},data:t[m]},e=void 0,h),v.parents=s,v.children=[],s=[],p.require=y})),d.hmrC={},d.hmrI={}})(),(()=>{var e;d.g.importScripts&&(e=d.g.location+"");var o=d.g.document;if(!e&&o&&(o.currentScript&&(e=o.currentScript.src),!e)){var n=o.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),d.p=e})(),n=(e,o,n,r)=>{var t=document.createElement("link");return t.rel="stylesheet",t.type="text/css",t.onerror=t.onload=a=>{if(t.onerror=t.onload=null,"load"===a.type)n();else{var s=a&&("load"===a.type?"missing":a.type),l=a&&a.target&&a.target.href||o,i=new Error("Loading CSS chunk "+e+" failed.\n("+l+")");i.code="CSS_CHUNK_LOAD_FAILED",i.type=s,i.request=l,t.parentNode.removeChild(t),r(i)}},t.href=o,document.head.appendChild(t),t},r=(e,o)=>{for(var n=document.getElementsByTagName("link"),r=0;r<n.length;r++){var t=(s=n[r]).getAttribute("data-href")||s.getAttribute("href");if("stylesheet"===s.rel&&(t===e||t===o))return s}var a=document.getElementsByTagName("style");for(r=0;r<a.length;r++){var s;if((t=(s=a[r]).getAttribute("data-href"))===e||t===o)return s}},t=[],a=[],s=e=>({dispose:()=>{for(var e=0;e<t.length;e++){var o=t[e];o.parentNode&&o.parentNode.removeChild(o)}t.length=0},apply:()=>{for(var e=0;e<a.length;e++)a[e].rel="stylesheet";a.length=0}}),d.hmrC.miniCss=(e,o,l,i,c,u)=>{c.push(s),e.forEach((e=>{var o=d.miniCssF(e),s=d.p+o,l=r(o,s);l&&i.push(new Promise(((o,r)=>{var i=n(e,s,(()=>{i.as="style",i.rel="preload",o()}),r);t.push(l),a.push(i)})))}))},(()=>{var e,o,n,r,t=d.hmrS_jsonp=d.hmrS_jsonp||{main:0},a={};function s(e){return new Promise(((o,n)=>{a[e]=o;var r=d.p+d.hu(e),t=new Error;d.l(r,(o=>{if(a[e]){a[e]=void 0;var r=o&&("load"===o.type?"missing":o.type),s=o&&o.target&&o.target.src;t.message="Loading hot update chunk "+e+" failed.\n("+r+": "+s+")",t.name="ChunkLoadError",t.type=r,t.request=s,n(t)}}))}))}function l(a){function s(e){for(var o=[e],n={},r=o.map((function(e){return{chain:[e],id:e}}));r.length>0;){var t=r.pop(),a=t.id,s=t.chain,i=d.c[a];if(i&&(!i.hot._selfAccepted||i.hot._selfInvalidated)){if(i.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(i.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var c=0;c<i.parents.length;c++){var u=i.parents[c],f=d.c[u];if(f){if(f.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([u]),moduleId:a,parentId:u};-1===o.indexOf(u)&&(f.hot._acceptedDependencies[a]?(n[u]||(n[u]=[]),l(n[u],[a])):(delete n[u],o.push(u),r.push({chain:s.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:o,outdatedDependencies:n}}function l(e,o){for(var n=0;n<o.length;n++){var r=o[n];-1===e.indexOf(r)&&e.push(r)}}d.f&&delete d.f.jsonpHmr,e=void 0;var i={},c=[],u={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var _ in o)if(d.o(o,_)){var p,m=o[_],g=!1,b=!1,h=!1,v="";switch((p=m?s(_):{type:"disposed",moduleId:_}).chain&&(v="\nUpdate propagation: "+p.chain.join(" -> ")),p.type){case"self-declined":a.onDeclined&&a.onDeclined(p),a.ignoreDeclined||(g=new Error("Aborted because of self decline: "+p.moduleId+v));break;case"declined":a.onDeclined&&a.onDeclined(p),a.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+p.moduleId+" in "+p.parentId+v));break;case"unaccepted":a.onUnaccepted&&a.onUnaccepted(p),a.ignoreUnaccepted||(g=new Error("Aborted because "+_+" is not accepted"+v));break;case"accepted":a.onAccepted&&a.onAccepted(p),b=!0;break;case"disposed":a.onDisposed&&a.onDisposed(p),h=!0;break;default:throw new Error("Unexception type "+p.type)}if(g)return{error:g};if(b)for(_ in u[_]=m,l(c,p.outdatedModules),p.outdatedDependencies)d.o(p.outdatedDependencies,_)&&(i[_]||(i[_]=[]),l(i[_],p.outdatedDependencies[_]));h&&(l(c,[p.moduleId]),u[_]=f)}o=void 0;for(var y,w=[],k=0;k<c.length;k++){var E=c[k],A=d.c[E];A&&(A.hot._selfAccepted||A.hot._main)&&u[E]!==f&&!A.hot._selfInvalidated&&w.push({module:E,require:A.hot._requireSelf,errorHandler:A.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete t[e]})),n=void 0;for(var o,r=c.slice();r.length>0;){var a=r.pop(),s=d.c[a];if(s){var l={},u=s.hot._disposeHandlers;for(k=0;k<u.length;k++)u[k].call(null,l);for(d.hmrD[a]=l,s.hot.active=!1,delete d.c[a],delete i[a],k=0;k<s.children.length;k++){var f=d.c[s.children[k]];f&&((e=f.parents.indexOf(a))>=0&&f.parents.splice(e,1))}}}for(var _ in i)if(d.o(i,_)&&(s=d.c[_]))for(y=i[_],k=0;k<y.length;k++)o=y[k],(e=s.children.indexOf(o))>=0&&s.children.splice(e,1)},apply:function(e){for(var o in u)d.o(u,o)&&(d.m[o]=u[o]);for(var n=0;n<r.length;n++)r[n](d);for(var t in i)if(d.o(i,t)){var s=d.c[t];if(s){y=i[t];for(var l=[],f=[],_=[],p=0;p<y.length;p++){var m=y[p],g=s.hot._acceptedDependencies[m],b=s.hot._acceptedErrorHandlers[m];if(g){if(-1!==l.indexOf(g))continue;l.push(g),f.push(b),_.push(m)}}for(var h=0;h<l.length;h++)try{l[h].call(null,y)}catch(o){if("function"==typeof f[h])try{f[h](o,{moduleId:t,dependencyId:_[h]})}catch(n){a.onErrored&&a.onErrored({type:"accept-error-handler-errored",moduleId:t,dependencyId:_[h],error:n,originalError:o}),a.ignoreErrored||(e(n),e(o))}else a.onErrored&&a.onErrored({type:"accept-errored",moduleId:t,dependencyId:_[h],error:o}),a.ignoreErrored||e(o)}}}for(var v=0;v<w.length;v++){var k=w[v],E=k.module;try{k.require(E)}catch(o){if("function"==typeof k.errorHandler)try{k.errorHandler(o,{moduleId:E,module:d.c[E]})}catch(n){a.onErrored&&a.onErrored({type:"self-accept-error-handler-errored",moduleId:E,error:n,originalError:o}),a.ignoreErrored||(e(n),e(o))}else a.onErrored&&a.onErrored({type:"self-accept-errored",moduleId:E,error:o}),a.ignoreErrored||e(o)}}return c}}}self.webpackHotUpdatefloema=(e,n,t)=>{for(var s in n)d.o(n,s)&&(o[s]=n[s]);t&&r.push(t),a[e]&&(a[e](),a[e]=void 0)},d.hmrI.jsonp=function(e,t){o||(o={},r=[],n=[],t.push(l)),d.o(o,e)||(o[e]=d.m[e])},d.hmrC.jsonp=function(a,i,c,u,f,_){f.push(l),e={},n=i,o=c.reduce((function(e,o){return e[o]=!1,e}),{}),r=[],a.forEach((function(o){d.o(t,o)&&void 0!==t[o]&&(u.push(s(o)),e[o]=!0)})),d.f&&(d.f.jsonpHmr=function(o,n){e&&!d.o(e,o)&&d.o(t,o)&&void 0!==t[o]&&(n.push(s(o)),e[o]=!0)})},d.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(d.p+d.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),d("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info"),d("./node_modules/webpack/hot/dev-server.js"),d("./app/index.js");d("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,